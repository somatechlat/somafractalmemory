{{- if .Values.prometheusRule.enabled }}
{{- $namespace := default .Release.Namespace .Values.prometheusRule.namespace -}}
{{- $labels := default (dict) .Values.prometheusRule.labels -}}
{{- $annotations := default (dict) .Values.prometheusRule.annotations -}}
{{- $api := default (dict) .Values.prometheusRule.api -}}
{{- $consumer := default (dict) .Values.prometheusRule.consumer -}}
{{- $apiService := default (include "somafractalmemory.fullname" .) (index $api "service") -}}
{{- $consumerDefaultService := printf "%s-consumer-metrics" (include "somafractalmemory.fullname" .) -}}
{{- $consumerService := default $consumerDefaultService (index $consumer "service") -}}
{{- $apiLatency := default (dict) (index $api "latency") -}}
{{- $apiError := default (dict) (index $api "errorRate") -}}
{{- $consumerFailure := default (dict) (index $consumer "failureRate") -}}
{{- $consumerStall := default (dict) (index $consumer "stall") -}}
{{- $apiLatencyEnabled := default false (index $apiLatency "enabled") -}}
{{- $apiErrorEnabled := default false (index $apiError "enabled") -}}
{{- $consumerFailureEnabled := default false (index $consumerFailure "enabled") -}}
{{- $consumerStallEnabled := default false (index $consumerStall "enabled") -}}
{{- $hasApiRules := or $apiLatencyEnabled $apiErrorEnabled -}}
{{- $hasConsumerRules := or $consumerFailureEnabled $consumerStallEnabled -}}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ include "somafractalmemory.fullname" . }}
  namespace: {{ $namespace }}
  labels:
    {{- include "somafractalmemory.labels" . | nindent 4 }}
    {{- with $labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with $annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if or $hasApiRules $hasConsumerRules }}
  groups:
    {{- if $hasApiRules }}
    - name: {{ include "somafractalmemory.fullname" . }}-api
      rules:
        {{- if $apiLatencyEnabled }}
        {{- $latencyPercentile := default 0.95 (index $apiLatency "percentile") -}}
        {{- $latencyWindow := default "5m" (index $apiLatency "window") -}}
        {{- $latencyThreshold := default 0.75 (index $apiLatency "thresholdSeconds") -}}
        {{- $latencyFor := default "5m" (index $apiLatency "for") -}}
        {{- $latencySeverity := default "warning" (index $apiLatency "severity") -}}
        - alert: SomaAPIHighLatency
          expr: |
            histogram_quantile({{ printf "%.2f" $latencyPercentile }},
              sum(rate(api_request_latency_seconds_bucket{namespace="{{ $namespace }}", service="{{ $apiService }}"}[{{ $latencyWindow }}])) by (le)
            ) > {{ printf "%.3f" $latencyThreshold }}
          for: {{ $latencyFor }}
          labels:
            severity: {{ $latencySeverity }}
          annotations:
            summary: "SomaFractalMemory API latency elevated"
            description: "p{{ printf "%.0f" (mul $latencyPercentile 100) }} latency above {{ printf "%.0f" (mul $latencyThreshold 1000) }} ms for {{ $latencyFor }} (service {{ $apiService }})."
        {{- end }}
        {{- if $apiErrorEnabled }}
        {{- $errorWindow := default "5m" (index $apiError "window") -}}
        {{- $errorThreshold := default 0.05 (index $apiError "thresholdRatio") -}}
        {{- $errorFor := default "10m" (index $apiError "for") -}}
        {{- $errorSeverity := default "critical" (index $apiError "severity") -}}
        - alert: SomaAPIHighErrorRate
          expr: |
            (
              sum(rate(api_responses_total{namespace="{{ $namespace }}", service="{{ $apiService }}", status=~"5.."}[{{ $errorWindow }}]))
                /
              clamp_min(sum(rate(api_responses_total{namespace="{{ $namespace }}", service="{{ $apiService }}"}[{{ $errorWindow }}])), 0.01)
            ) > {{ printf "%.3f" $errorThreshold }}
          for: {{ $errorFor }}
          labels:
            severity: {{ $errorSeverity }}
          annotations:
            summary: "SomaFractalMemory API error rate elevated"
            description: "5xx ratio above {{ printf "%.1f" (mul $errorThreshold 100) }}%% for {{ $errorFor }} (service {{ $apiService }})."
        {{- end }}
    {{- end }}
    {{- if $hasConsumerRules }}
    - name: {{ include "somafractalmemory.fullname" . }}-consumer
      rules:
        {{- if $consumerFailureEnabled }}
        {{- $failureWindow := default "5m" (index $consumerFailure "window") -}}
        {{- $failureThreshold := default 0.1 (index $consumerFailure "thresholdPerSecond") -}}
        {{- $failureFor := default "5m" (index $consumerFailure "for") -}}
        {{- $failureSeverity := default "warning" (index $consumerFailure "severity") -}}
        - alert: SomaConsumerProcessingFailures
          expr: |
            sum(rate(consumer_process_failure_total{namespace="{{ $namespace }}", service="{{ $consumerService }}"}[{{ $failureWindow }}])) > {{ printf "%.3f" $failureThreshold }}
          for: {{ $failureFor }}
          labels:
            severity: {{ $failureSeverity }}
          annotations:
            summary: "Consumer processing failures detected"
            description: "Failure rate above {{ printf "%.3f" $failureThreshold }} msgs/s over {{ $failureWindow }} (service {{ $consumerService }})."
        {{- end }}
        {{- if $consumerStallEnabled }}
        {{- $stallWindow := default "10m" (index $consumerStall "window") -}}
        {{- $stallMinMessages := default 1 (index $consumerStall "minMessages") -}}
        {{- $stallFor := default "10m" (index $consumerStall "for") -}}
        {{- $stallSeverity := default "critical" (index $consumerStall "severity") -}}
        - alert: SomaConsumerStalled
          expr: |
            increase(consumer_messages_consumed_total{namespace="{{ $namespace }}", service="{{ $consumerService }}"}[{{ $stallWindow }}]) < {{ $stallMinMessages }}
          for: {{ $stallFor }}
          labels:
            severity: {{ $stallSeverity }}
          annotations:
            summary: "Consumer appears stalled"
            description: "Fewer than {{ $stallMinMessages }} messages consumed over {{ $stallWindow }} (service {{ $consumerService }})."
        {{- end }}
    {{- end }}
  {{- else }}
  groups: []
  {{- end }}
{{- end }}
